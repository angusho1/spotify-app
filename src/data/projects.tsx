import { Code } from "@mantine/core";
import { Project } from "../types/Project.types";

export const PROJECTS: Project[] = [
    {
        name: 'Chinatown Sound Map',
        date: 'Summer 2021 - Present',
        text: (
            <>
                I've rebuilt and redesigned an existing community project that allows users to listen to sound clips of Chinatown Vancouver on an interactive map. Without any access to the old source code, I've built an entirely new web app in React, Express.js, and Azure. The original website is hosted on WordPress, with sound recordings hosted on users' SoundCloud accounts. I've redesigned the website so that users can upload recordings and images directly to the server. I also created a custom audio playback interface with play/pause, seek, and volume controls.
                <br />
                <br />
                The recordings are currently downloaded in their entirety before playback begins, so one of my next goals is to implement audio streaming instead. I am also planning on creating a public API of Chinatowns around the world, so that users can submit recordings for different cities.
            </>
        ),
        url: 'https://github.com/angusho1/chinatown-sound-map',
        videoUrl: require('../assets/videos/chinatown-sound-map.mov'),
    },
    {
        name: 'File Explorer',
        date: 'Summer 2021 - Summer 2022',
        text: (
            <>
                Wanting to speed up a simple (yet incredibly frequent) developer task, I decided to build a terminal UI that allows developers to navigate their file system in the terminal using arrow keys. I found a Python library called <Code>curses</Code>, which provides a framework for dynamically changing what's rendered in the terminal. I found this project to be challenging (and frustrating) at times because it was difficult to debug and there wasn't much “common mistakes” documentation I could refer to. However, I learned a lot while designing the OOP model and while figuring out how to maintain the state of different components on screen.
                <br />
                <br />
                If I were to go back and make some improvements, I would add support for aliases and try to find a way to <Code>cd</Code> into another directory without having to paste the command generated by my utility.
            </>
        ),
        url: 'https://github.com/angusho1/file-explorer',
        videoUrl: require('../assets/videos/file-explorer.mov'),
    },
    {
        name: 'Laser Eyes',
        date: 'Summer 2022',
        text: (
            <>
                After taking a Computer Vision course last year, I wanted to apply what I learned through a fun project. I built a web app that allows users to upload images of people and have a laser effect automatically added to their eyes. I also wanted to learn and try the Django framework, so I wrote the backend logic in Python and served a webpage with HTML, CSS and JavaScript.
                <br />
                <br />
                To detect the locations of eyes in an image, I used the OpenCV library and existing Haar Cascade classifiers. The most challenging parts were figuring out how to filter out the false positives while detecting as many pairs of eyes as possible, and also placing the laser graphic at the right location and scale on top of the eyes.
            </>
        ),
        url: 'https://github.com/angusho1/laser-eyes',
        videoUrl: require('../assets/videos/laser-eyes.mov'),
    },
];
